#!/bin/bash

# Tests to run ($@) must accept the following args:
#  First arg: Number Subsystems - 2^n (Total system size in 2^n bytes if < 0)
#  Second arg: Subsystem size in 2^n elements
#  Third arg:  Element size in 2^n bytes [3]
#  Fourth arg: Iteration Count for each subsystem [18]
#  Fifth arg:  Repetitions [3]
#  Sixth arg:  churnCount [1]

tests="$*"

function runtests {
    for test in $tests; do
        (set -x; time $test "$@") || exit 1
    done
}

########################################################################
# Unless otherwise specified, all parameters are expressed as exponents of 2.
# Example, a size paramter with value 4 yields 16 items.
########################################################################

# Primitive parameters
#  nS  Number of subsystems
#  sS  Subsystem size, in elements
#  sSb Subsystem size, in bytes
#  eS  Element size, in bytes
#  iC  Iteration count - accesses per element within a subsystem
#  rC  Repetition - Number of complete repetitions over all subsystems
#  cC  Churn count (shuffle factor)

# Compound "depth" parameters
#  S   System size, in bytes (nS * sS * eS)
#      Note: Data pointers within vectors are missing from the above
#      calculation. The S *should* be (nS * (sS * (eS + 8) + 8) + 8).
#  W   Work per element (iC * rC + cC)

# #######################################################################
# # Test0: Nearly exhaustive test up to system size 2^21
# #######################################################################

# #######################################################################
# # test1: cost of churn alone (no access).
# # Hold churnCount at 2 (i.e., 2^2 == 4)
# # Hold number of elements at 25 (2^25)
# # Vary element size; Total system size with vary with element size
# # Hold access at zero except for churnCount.
# cC=0
# S=25
# for (( nS=15; nS <= 18; nS+=3 )); do
#     let "sS = S - nS"
#     for (( eS=4; eS<=10; eS+=2 )); do
#         runtests $nS $sS $eS -1 -1 $cC
#     done
# done
# #######################################################################

# #######################################################################
# # test2: Test cost of access. Find where iC saturates for churn = 2^0.
# # Hold churnCount at 0 (i.e., 2^0 = 1)
# # Hold system size at 2^30
# # Hold subsystem size constant
# # Hold element size constant
# # Vary iteration count between -1 and 10 (0 to 1024 accesses)
# # Hold repetitions to 0 (1 iteration)
# sS=9
# eS=10
# for (( S=30; S<=30; ++S )); do
#     for (( iC=-1; iC<=10; ++iC)); do
#         runtests -$S $sS $eS $iC 0 0
#     done
# done
# #######################################################################

# #######################################################################
# # test3 Explore two dimensions: number of accesses and system size

# # 1st dimension: number of accesses
# # Hold system size constant at 2^29 bytes
# # Hold subsystem size constant at 2^17 elements
# # Hold element size constant at 2^8
# # Hold repetitions constant at 2^0
# # Vary iteration count from 2^6 to 2^9
# # Start with one run of zero iterations to measure churn overhead
# S=29
# sS=17
# eS=8
# runtests -$S $sS $eS 0 -1 0
# for (( iC=6; iC<=9; ++iC )); do
#     runtests -$S $sS $eS $iC 0 0
# done

# # 2nd dimension: system size
# # Vary system size constant from 2^28 to 2^34 bytes by factors of 2^2
# # Hold subsystem size constant at 2^16 elements
# # Hold element size constant at 2^8
# # Hold iteration count constant at 2^7
# # Hold repetition count constant at 2^0
# sS=16
# eS=8
# iC=7
# for (( S=28; S<=34; S+=2 )); do
#     runtests -$S $sS $eS $iC 0 0
# done
# #######################################################################

# #######################################################################
# # test4: Vary size, covering large sizes at modest acceses
# # Vary system size starting at 2^34
# # Hold subsystem size constant at 2^16 elements
# # Hold element size constant at 2^8
# # Hold iteration count constant at 2^2
# # Hold repetition count constant at 2^0
# sS=16
# eS=8
# iC=2
# for (( S=35; S<=37; ++S )); do
#     runtests -$S $sS $eS -1 -1 0
#     runtests -$S $sS $eS $iC 0 0
# done
# #######################################################################

# #######################################################################
# # test5: Test 1-byte element size at various system sizes
# # Note: Test was killed inexplicably at size 2^21
# #######################################################################

# #######################################################################
# # test6: small element sizes for constructives vs. destructive cache interferance
# #
# # Hold number of subsystems constant at 2^16
# # Hold subsystem size in bytes constant at 2^8
# # Vary element size from 2^0 to 2^5
# # Vary subsystem size in elements inversely to element size to keep at 2^8b
# # Hold iteration count (per subsystem) at 2^0, i.e., 1 access
# # Hold repetition count constant at 2^7
# # Hold churn count constant at 2^0
# nS=16
# sSb=8
# iC=0
# rC=7
# cC=0
# for (( eS=0; eS<=5; ++eS )); do
#     let "sS = sSb - eS"
#     runtests $nS $sS $eS $iC $rC $cC
# done
# #######################################################################

# #######################################################################
# # test7: 1-byte element size at different subsystem sizes
# #
# # Hold total system size constant at 2^24
# # Vary subsystem size in elements from 2^4 to 2^23
# # Hold element size constant at 2^0 (1 byte)
# # Hold iteration count (per subsystem) at 2^0, i.e., 1 access
# # Hold repetition count constant at 2^7
# # Hold churn count constant at 2^0
# S=24
# eS=0
# iC=0
# rC=7
# cC=0
# for (( sS=4; sS<S; ++sS )); do
#     runtests -$S $sS $eS $iC $rC $cC
# done
# #######################################################################

#######################################################################
# test8: Find breaks in preformance where each cache is exhausted
# Vary system size from 2^7 to 2^25
# Vary subsystem size from 2^0 bytes up to system size
# Hold element size constant at 2^6 (one cache line)
# Hold iteration count constant at 2^4
# Repetition count varies inversely with system size (min 2^5)
#######################################################################
eS=0
iC=4
cC=0
for (( S=25; S<=25; ++S )); do
    let "rC = 28-S"
    for (( sS=0; sS<=S-eS; ++sS )); do
        if (( S-sS-eS >= 25 || sS >= 24 )); then
            continue  # No one vector of vector may be larger than 2^25 elements
        fi
        runtests -$S $sS $eS $iC $rC $cC
    done
done
done
